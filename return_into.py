"""

    PYTHON_USERNAME       - your DB username
    PYTHON_PASSWORD       - your DB password
    PYTHON_CONNECTSTRING  - the connection string to the DB, e.g. "example.com/XEPDB1"
    PORT                  - port the web server will listen on.  The default in 8080

"""

import os
import sys
# import oracle_cx for connecting to oracle DB
import cx_Oracle
# import main Flask class and request object
from flask import Flask, request



# Connection string variables 
HOST_NAME         = 'AM009'
PORT_NUMBER       = '1521'
SERVICE_NAME      = 'GACC'

DB_USER           = 'PIB'
DB_PASSWORD       = 'ab56rt47'
DIR_ORACLE_CLIENT =  'P:\oracle\ora11g_32bit'


#
# Start a connection pool.
#
# 
#
# Doc link: https://cx-oracle.readthedocs.io/en/latest/user_guide/connection_handling.html#connection-pooling
# init_session(): a 'session callback' to efficiently set any initial state
# that each connection should have.
#
# 
# NOTE: If you have multiple SQL statements, then them combine all in a PL/SQL anonymous
# block with BEGIN/END so you only call execute() once.  
# Note there is no explicit 'close cursor' or 'close connection' required. At the
# end-of-scope when init_session() finishes, the cursor and connection will be
# closed automatically.  
# Note for traffic larger then expected for teh PIB ESRI services this could be added
#
# Doc link: https://cx-oracle.readthedocs.io/en/latest/user_guide/connection_handling.html#session-callbacks-for-setting-pooled-connection-state
#
def init_session(connection, requestedTag_ignored):
    cursor = connection.cursor()
    cursor.execute("""
        ALTER SESSION SET
          TIME_ZONE = 'UTC'
          NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI'""")

# start_pool(): starts the connection pool
def start_pool():

    # Generally a fixed-size pool is recommended, i.e. pool_min=pool_max.
    # Here the pool contains 4 connections, which is fine for 4 conncurrent
    # users.
    #
    # The "get mode" is chosen so that if all connections are already in use, any
    # subsequent acquire() will wait for one to become available.

    pool_min = 4
    pool_max = 4
    pool_inc = 0
    pool_gmd = cx_Oracle.SPOOL_ATTRVAL_WAIT


    print("Connecting to "+ SERVICE_NAME )

    dsn = cx_Oracle.makedsn(HOST_NAME, PORT_NUMBER, service_name=SERVICE_NAME) # if needed, place an 'r' before any parameter in order to address special characters such as '\'.

    pool = cx_Oracle.SessionPool(user=DB_USER,
                                 password=DB_PASSWORD,
                                 dsn=dsn,
                                 min=pool_min,
                                 max=pool_max,
                                 increment=pool_inc,
                                 threaded=True,
                                 getmode=pool_gmd,
                                 sessionCallback=init_session)

    return pool

################################################################################
#
# create_schema(): drop and create the demo table, and add a row
#
def create_schema():
    connection = pool.acquire()
    cursor = connection.cursor()
    cursor.execute("""
        begin
          begin
            execute immediate 'drop table demo';
            exception when others then
              if sqlcode <> -942 then
                raise;
              end if;
          end;

          execute immediate 'create table demo (
               id        number generated by default as identity,
               username varchar2(40))';

          execute immediate 'insert into demo (username) values (''chris'')';

          commit;
        end;""")

################################################################################
#
# Specify some routes
#
# The default route will display a welcome message:
#   http://127.0.0.1:8080/
#
# To insert new a user 'fred' you can call:
#    http://127.0.0.1:8080/post/fred
#
# To find a username you can pass an id, for example 1:
#   http://127.0.0.1:8080/user/1
#

app = Flask(__name__)


# Display a welcome message on the 'home' page
@app.route('/')
def index():
    return "Welcome to the PIB/ESRI 'project en maatregel' api locatie"



#
# NOTE on use of bind variables in cxoracle
# Bound variables are, as always for Oracle, denoted with a ':'
# Inbound variables are bound by either name or order
# # outbound variables require the use of a variabel eg: 
#     out_val = cursor.var(int)
#     cursor.execute("""
#             begin
#                 :out_val := :in_bind_var1 + :in_bind_var2;
#             end;""",
#             out_val=out_val, in_bind_var1=8, in_bind_var2=7)
#     print(out_val.getvalue())        # will print 15 



#stmprjldr
#stmafd

@app.route('/projects', methods=['POST'])
def post_project(): 
  connection = pool.acquire()
  cursor = connection.cursor()
  #retrieve request 
  request_data = request.get_json()
  #marchall request to 

  prjid_out_val = cursor.var(int)
  cursor.execute("""
                      begin 
                        INSERT
                        INTO PRJN
                          (
                            --PRJ_ID,
                            NAAM,
                            --FMSCODE,
                            PRJLDR_ID,  -- not nullable 
                            AFD_ID,     -- not nullable
                          --  UITVRINGVAN,
                          --  UITVRINGTOT,
                          --  VERWIJDERD,
                          --  OPMERKING,
                          --  OPDRACHTG_ID,
                          --  BUDGETH_ID,
                          --  PORTEF_ID,
                          --  HPRJN_ID,
                          --  PROJECTMAP,
                          --  CMSLINK,
                          --  BBP_ID,
                          --  DPROCES_ID,
                          --  RBOEKW,
                          --  PROCES_ID,
                          --  OPMERKINGM,
                          --  FINSTATUS,
                          --  MIP_ID,
                          --  PRJ_BOEKNAAM,
                          -- PRJ_BOEKNR,
                          --  DISTRICT_ID,
                          --  CODACODE,
                          --  KENMERK,
                            OMSCHRIJVING
                          )
                                  VALUES
                          (
                          --  PRJ_ID,
                              :NAAM,
                          --  :FMSCODE,
                              :PRJLDR_ID,
                              :AFD_ID,
                          --  :UITVRINGVAN,
                          --  :UITVRINGTOT,
                          --  :VERWIJDERD,
                          --  :OPMERKING,
                          --  :OPDRACHTG_ID,
                          --  :BUDGETH_ID,
                          --  :PORTEF_ID,
                          --  :HPRJN_ID,
                          --  :PROJECTMAP,
                          --  :CMSLINK,
                          --  :BBP_ID,
                          --  :DPROCES_ID,
                          --  :RBOEKW,
                          --  :PROCES_ID,
                          --  :OPMERKINGM,
                          --  :FINSTATUS,
                          --  :MIP_ID,
                          --  :PRJ_BOEKNAAM,
                          --  :PRJ_BOEKNR,
                          --  :DISTRICT_ID,
                          --  :CODACODE,
                          --  :KENMERK,
                            :OMSCHRIJVING
                          )
                        returning  PRJ_ID into :out_prj_id;
                        commit;          
                      end;    

                """,out_prj_id = prjid_out_val,  OMSCHRIJVING='Service omschrijving test', NAAM = 'service test naam', PRJLDR_ID = 41, AFD_ID=7  )
  return f'prj_id {prjid_out_val} aangemaakt'
    




################################################################################
#
# Initialization is done once at startup time
################################################################################
if __name__ == '__main__':
    #cx_Oracle.init_oracle_client
    #cx_Oracle.init_oracle_client(DIR_ORACLE_CLIENT)
    

    # Start a pool of connections
    pool = start_pool()

    # Create a demo table
    #create_schema()

    # Start a webserver
    app.run(port=int(os.environ.get('PORT', '8080')))
